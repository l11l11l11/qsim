/* Copyright Â© 2018 Gianmarco Garrisi

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>. */
//! `Resource` trait and some implementations.
//!
//! In many simulated systems, finite resources have to be taken into account.
//! The `Resource` trait can be used to model such entities.
//!
//! When a resource is added to a simulation with the `create_resource` method an ID is returned.
//! The simulation process can request the resource yielding the `Request` effect with the ID.
//!
//! The `Resource` trait allow the implementation of custom resource types.
//! A `SimpleResource` struct provides a basic but useful implementation of the `Resource` trait.
use crate::Event;
use std::{collections::VecDeque, fmt::Debug};

/// A simple resource that is allocated based on a first come first served policy.
///
/// When there are no more instances of the resource available, the processes are enqueued in a
/// FIFO and triggered as soon as an instance is released.
///
/// If a resource gets more release then requests, it will panic.
#[derive(Debug)]
pub struct SimpleResource<T>
where
    T: Debug,
{
    quantity: usize,
    available: usize,
    queue: VecDeque<Event<T>>,
}

/// The resource trait implemented by every Resource of the simulation
pub trait Resource<T>: Debug {
    /// This method is called whenever a resource is requested by a process in the simulation.
    ///
    /// It receives an event with current time, the `ProcessId` of the process requesting the
    /// resource and the state generated by the process (with the request effect).
    ///
    /// It returns an optional `Event` that is added to the simulation.
    fn allocate_or_enqueue(&mut self, event: Event<T>) -> Vec<Event<T>>;

    /// This method is called by the simulator when the resource is released.
    ///
    /// It will receive the release event with current simulation time, the id of the process
    /// that released the request and the state generated by the process (with the release effect)
    ///
    /// If an optional `Event` is returned, it is scheduled to be simulated.
    fn release_and_schedule_next(&mut self, event: Event<T>) -> Vec<Event<T>>;
}

impl<T> Resource<T> for SimpleResource<T>
where
    T: Debug,
{
    fn allocate_or_enqueue(&mut self, event: Event<T>) -> Vec<Event<T>> {
        if self.available > 0 {
            self.available -= 1;
            vec![event]
        } else {
            self.queue.push_back(event);
            vec![]
        }
    }
    ///
    fn release_and_schedule_next(&mut self, event: Event<T>) -> Vec<Event<T>> {
        match self.queue.pop_front() {
            Some(mut request_event) => {
                // some is waiting for the request, schedule it! and schedule the self
                request_event.set_time(event.time());
                vec![request_event, event]
            }
            None => {
                // no one is waiting for the resorce, restore the availiable and return self
                assert!(self.available < self.quantity);
                self.available += 1;
                vec![event]
            }
        }
    }
}

impl<T> SimpleResource<T>
where
    T: Debug,
{
    /// Create a simple resource of which `quantity` instances are available
    pub fn new(quantity: usize) -> SimpleResource<T> {
        SimpleResource {
            quantity,
            available: quantity,
            queue: VecDeque::new(),
        }
    }
}
pub trait CopyDefault {
    fn copy_default(&self) -> Self;
}

/// a class that implement waiting on both request and release
#[derive(Debug)]
pub struct Store<T>
where
    T: Debug,
{
    capacity: usize,
    send_waiting_queue: VecDeque<Event<T>>,
    recv_waiting_queue: VecDeque<Event<T>>,
    value_queue: VecDeque<Event<T>>,
}
impl<T> Resource<T> for Store<T>
where
    T: CopyDefault + Debug,
{
    fn allocate_or_enqueue(&mut self, event: Event<T>) -> Vec<Event<T>> {
        let current_time = event.time();
        let current_id = event.process();

        if let Some(recv_waiting) = self.recv_waiting_queue.pop_front() {
            // activate both process
            // 1. activate the recv_waiting process
            let recv_id = recv_waiting.process();
            let mut recv_event = event;
            recv_event.set_process(recv_id);

            // 2. activate the send process
            let send_event =
                Event::new(current_time, current_id, recv_event.state().copy_default());
            vec![recv_event, send_event]
        } else {
            // in this case, no recv waiting process
            // if the queue is full, push to waiting queue and return nothing,
            // else, push to the queue and send continue

            if self.value_queue.len() < self.capacity {
                // queue is not full
                let new_state = event.state().copy_default();
                self.value_queue.push_back(event);
                vec![Event::new(current_time, current_id, new_state)]
            } else {
                // queue is full
                self.send_waiting_queue.push_back(event);
                vec![]
            }
        }
    }

    fn release_and_schedule_next(&mut self, event: Event<T>) -> Vec<Event<T>> {
        let current_time = event.time();
        let current_id = event.process();

        if let Some(mut value) = self.value_queue.pop_front() {
            // have value, use it and activate the waiting event also!
            if let Some(waiting) = self.send_waiting_queue.pop_front() {
                // have waiting, need to do 3 things,1, move waiting to value queue, 2, activate the waiting process, 3, activate the release process
                let mut new_events = vec![];
                let waiting_id = waiting.process();

                // 1. move waiting to value queue

                self.value_queue.push_back(waiting);

                // 2. acitvate the waiting process
                new_events.push(Event::new(
                    current_time,
                    waiting_id,
                    event.state.copy_default(),
                ));

                // 3. activate the release process
                value.set_process(current_id);
                value.set_time(current_time);
                new_events.push(value);

                new_events
            } else {
                // in this case , no waiting process, just send the value and activate the release process
                value.set_process(current_id);
                value.set_time(current_time);
                vec![value]
            }
        } else {
            // in this case, no value in queue, and no waiting process, put this request to recv_waiting list! and return nothing
            self.recv_waiting_queue.push_back(event);
            vec![]
        }
    }
}
impl<T> Store<T>
where
    T: Debug,
{
    pub fn new(capacity: usize) -> Self {
        Store {
            capacity,
            send_waiting_queue: VecDeque::new(),
            recv_waiting_queue: VecDeque::new(),
            value_queue: VecDeque::new(),
        }
    }
}
